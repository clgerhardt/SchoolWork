package extraCredit;

//import java.awt.*; 
import java.util.HashMap;
//import java.util.Map;
import java.util.Scanner;
import java.util.Set;

import javax.swing.*;

public class main extends JFrame {

	public static HashMap<String, Integer> map = new HashMap<>();
	public static int[][] a = new int[7][7];

	public static void main(String[] args) {

		map.put("A", 0);
		map.put("B", 1);
		map.put("C", 2);
		map.put("D", 3);
		map.put("E", 4);
		map.put("F", 5);
		map.put("G", 6);

		for (int r = 0; r < a.length; r++) {
			for (int c = 0; c < a.length; c++) {

				a[r][c] = 0;

			}
		}

		Scanner input = new Scanner(System.in);
		boolean x = false;
		do {

			System.out.println("                          Your Graph:");
			System.out.println("***************************************************************************");
			System.out.println("i)  Degree of Nodes");
			System.out.println("ii)  Display list of Adjacent nodes to selected nodes");
			System.out.println("iii) Drop an edge between nodes");
			System.out.println("iv) Add an edge between nodes");
			System.out.println("v) Print the adjacent matrix");
			System.out.println("vi) Quit");
			System.out.println("***************************************************************************");

			int i = input.nextInt();

			switch (i) {
			// Display Degree of Node
			case 1:
				System.out.println("Select the Node:");
				String k = input.next();
				int deg = 0;
				for (int o = map.get(k.toUpperCase()); o < map.get(k.toUpperCase()) + 1; o++) {
					for (int y = 0; y < a.length; y++) {
						if (a[o][y] == 1) {
							deg++;
						}
					}
				}

				System.out.println(deg);
				break;
			// display list of nodes adjacent to chosen node
			case 2:
				System.out.println("Select the Node:");
				String t = input.next();
				for (int o = map.get(t.toUpperCase()); o < map.get(t.toUpperCase()) + 1; o++) {
					for (int y = 0; y < a.length; y++) {
						if (a[o][y] == 1) {
							if (y == 0) {
								System.out.println("A");
							}
							if (y == 1) {
								System.out.println("B");
							}
							if (y == 2) {
								System.out.println("C");
							}
							if (y == 3) {
								System.out.println("D");
							}
							if (y == 4) {
								System.out.println("E");
							}
							if (y == 5) {
								System.out.println("F");
							}
							if (y == 6) {
								System.out.println("G");
							}
						}
					}
				}

				break;
			// Drop and edge between nodes
			case 3:
				System.out.println("Enter the frist Node:");
				String h = input.next();
				System.out.println("Enter the second Node:");
				String u = input.next();

				a[map.get(h.toUpperCase())][map.get(u.toUpperCase())] = 0;
				a[map.get(u.toUpperCase())][map.get(h.toUpperCase())] = 0;

				break;
			// add and edge between nodes
			case 4:
				System.out.println("Enter the frist Node:");
				String n = input.next();
				System.out.println("Enter the second Node:");
				String g = input.next();

				a[map.get(n.toUpperCase())][map.get(g.toUpperCase())] = 1;
				a[map.get(g.toUpperCase())][map.get(n.toUpperCase())] = 1;

				break;
			// Print it out
			case 5:
			Set<String> m = map.keySet();
			String [] s = new String[7];
			m.toArray(s);
				for (int r = 0; r < a.length; r++) {
					System.out.print( s[r] + "");
					for (int c = 0; c < a.length; c++) {

						System.out.print( a[r][c] + " \n");
						
					}
					
				}

				

				break;
			// Quit
			case 6:
				x = true;
				break;
			}
		} while (x == false);

	}
}